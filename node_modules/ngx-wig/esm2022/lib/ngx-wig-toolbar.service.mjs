import { Injectable, Inject } from '@angular/core';
import { BUTTONS } from './config';
import * as i0 from "@angular/core";
export class NgxWigToolbarService {
    constructor(buttonLibraryConfig) {
        this._defaultButtonsList = [];
        this._buttonLibrary = buttonLibraryConfig.reduce((acc, val) => ({ ...acc, ...val }), {});
        this._defaultButtonsList = Object.keys(this._buttonLibrary);
    }
    setButtons(buttons) {
        if (!Array.isArray(buttons)) {
            throw new Error('Argument "buttons" should be an array');
        }
        this._defaultButtonsList = buttons;
    }
    addStandardButton(name, title, command, styleClass, icon) {
        if (!name || !title || !command) {
            throw new Error('Arguments "name", "title" and "command" are required');
        }
        styleClass = styleClass || '';
        this._buttonLibrary[name] = { title, command, styleClass, icon };
        this._defaultButtonsList.push(name);
    }
    getToolbarButtons(buttonsList) {
        let buttons = this._defaultButtonsList;
        const toolbarButtons = [];
        if (typeof buttonsList !== 'undefined') {
            buttons = string2array(buttonsList);
        }
        buttons.forEach(buttonKey => {
            if (!buttonKey) {
                return;
            }
            if (!this._buttonLibrary[buttonKey]) {
                throw new Error(`There is no "${buttonKey}" in your library. Possible variants: ${Object.keys(this._buttonLibrary)}`);
            }
            const button = Object.assign({}, this._buttonLibrary[buttonKey]);
            // button.isActive = () => {return !!this.command && document.queryCommandState(this.command);}
            toolbarButtons.push(button);
        });
        return toolbarButtons;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: NgxWigToolbarService, deps: [{ token: BUTTONS }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: NgxWigToolbarService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: NgxWigToolbarService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [BUTTONS]
                }] }]; } });
const string2array = (keysString) => keysString
    .split(',')
    .map(Function.prototype.call, String.prototype.trim);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LXdpZy10b29sYmFyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtd2lnL3NyYy9saWIvbmd4LXdpZy10b29sYmFyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUEyQixPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7O0FBSzVELE1BQU0sT0FBTyxvQkFBb0I7SUFJL0IsWUFBNkIsbUJBQXFDO1FBSDFELHdCQUFtQixHQUFhLEVBQUUsQ0FBQztRQUl6QyxJQUFJLENBQUMsY0FBYyxHQUFHLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQW1CLEVBQUUsR0FBbUIsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxFQUFFLEdBQUcsR0FBRyxFQUFFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN6SCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUVNLFVBQVUsQ0FBQyxPQUFpQjtRQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUMzQixNQUFNLElBQUksS0FBSyxDQUFDLHVDQUF1QyxDQUFDLENBQUM7U0FDMUQ7UUFFRCxJQUFJLENBQUMsbUJBQW1CLEdBQUcsT0FBTyxDQUFDO0lBQ3JDLENBQUM7SUFFTSxpQkFBaUIsQ0FDdEIsSUFBWSxFQUNaLEtBQWEsRUFDYixPQUFlLEVBQ2YsVUFBa0IsRUFDbEIsSUFBWTtRQUVaLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQyxzREFBc0QsQ0FBQyxDQUFDO1NBQ3pFO1FBRUQsVUFBVSxHQUFHLFVBQVUsSUFBSSxFQUFFLENBQUM7UUFDOUIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ2pFLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUVNLGlCQUFpQixDQUFDLFdBQW9CO1FBQzNDLElBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQztRQUN2QyxNQUFNLGNBQWMsR0FBYyxFQUFFLENBQUM7UUFFckMsSUFBSSxPQUFPLFdBQVcsS0FBSyxXQUFXLEVBQUU7WUFDdEMsT0FBTyxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNyQztRQUVELE9BQU8sQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDMUIsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDZCxPQUFPO2FBQ1I7WUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsRUFBRTtnQkFDbkMsTUFBTSxJQUFJLEtBQUssQ0FDYixnQkFBZ0IsU0FBUyx5Q0FBeUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FDckcsQ0FBQzthQUNIO1lBRUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO1lBQ2pFLCtGQUErRjtZQUMvRixjQUFjLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxjQUFjLENBQUM7SUFDeEIsQ0FBQzs4R0ExRFUsb0JBQW9CLGtCQUlYLE9BQU87a0hBSmhCLG9CQUFvQixjQUZuQixNQUFNOzsyRkFFUCxvQkFBb0I7a0JBSGhDLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzswQkFLYyxNQUFNOzJCQUFDLE9BQU87O0FBeUQ3QixNQUFNLFlBQVksR0FBRyxDQUFDLFVBQWtCLEVBQUUsRUFBRSxDQUMxQyxVQUFVO0tBQ1AsS0FBSyxDQUFDLEdBQUcsQ0FBQztLQUNWLEdBQUcsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBUQnV0dG9uTGlicmFyeSwgVEJ1dHRvbiwgQlVUVE9OUyB9IGZyb20gJy4vY29uZmlnJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgTmd4V2lnVG9vbGJhclNlcnZpY2Uge1xuICBwcml2YXRlIF9kZWZhdWx0QnV0dG9uc0xpc3Q6IHN0cmluZ1tdID0gW107XG4gIHByaXZhdGUgX2J1dHRvbkxpYnJhcnk6IFRCdXR0b25MaWJyYXJ5O1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoQlVUVE9OUykgYnV0dG9uTGlicmFyeUNvbmZpZzogVEJ1dHRvbkxpYnJhcnlbXSkge1xuICAgIHRoaXMuX2J1dHRvbkxpYnJhcnkgPSBidXR0b25MaWJyYXJ5Q29uZmlnLnJlZHVjZSgoYWNjOiBUQnV0dG9uTGlicmFyeSwgdmFsOiBUQnV0dG9uTGlicmFyeSkgPT4gKHsgLi4uYWNjLCAuLi52YWwgfSksIHt9KTtcbiAgICB0aGlzLl9kZWZhdWx0QnV0dG9uc0xpc3QgPSBPYmplY3Qua2V5cyh0aGlzLl9idXR0b25MaWJyYXJ5KTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRCdXR0b25zKGJ1dHRvbnM6IHN0cmluZ1tdKTogdm9pZCB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGJ1dHRvbnMpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FyZ3VtZW50IFwiYnV0dG9uc1wiIHNob3VsZCBiZSBhbiBhcnJheScpO1xuICAgIH1cblxuICAgIHRoaXMuX2RlZmF1bHRCdXR0b25zTGlzdCA9IGJ1dHRvbnM7XG4gIH1cblxuICBwdWJsaWMgYWRkU3RhbmRhcmRCdXR0b24oXG4gICAgbmFtZTogc3RyaW5nLFxuICAgIHRpdGxlOiBzdHJpbmcsXG4gICAgY29tbWFuZDogc3RyaW5nLFxuICAgIHN0eWxlQ2xhc3M6IHN0cmluZyxcbiAgICBpY29uOiBzdHJpbmdcbiAgKSB7XG4gICAgaWYgKCFuYW1lIHx8ICF0aXRsZSB8fCAhY29tbWFuZCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdBcmd1bWVudHMgXCJuYW1lXCIsIFwidGl0bGVcIiBhbmQgXCJjb21tYW5kXCIgYXJlIHJlcXVpcmVkJyk7XG4gICAgfVxuXG4gICAgc3R5bGVDbGFzcyA9IHN0eWxlQ2xhc3MgfHwgJyc7XG4gICAgdGhpcy5fYnV0dG9uTGlicmFyeVtuYW1lXSA9IHsgdGl0bGUsIGNvbW1hbmQsIHN0eWxlQ2xhc3MsIGljb24gfTtcbiAgICB0aGlzLl9kZWZhdWx0QnV0dG9uc0xpc3QucHVzaChuYW1lKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRUb29sYmFyQnV0dG9ucyhidXR0b25zTGlzdD86IHN0cmluZyk6IFRCdXR0b25bXSB7XG4gICAgbGV0IGJ1dHRvbnMgPSB0aGlzLl9kZWZhdWx0QnV0dG9uc0xpc3Q7XG4gICAgY29uc3QgdG9vbGJhckJ1dHRvbnM6IFRCdXR0b25bXSA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBidXR0b25zTGlzdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGJ1dHRvbnMgPSBzdHJpbmcyYXJyYXkoYnV0dG9uc0xpc3QpO1xuICAgIH1cblxuICAgIGJ1dHRvbnMuZm9yRWFjaChidXR0b25LZXkgPT4ge1xuICAgICAgaWYgKCFidXR0b25LZXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuX2J1dHRvbkxpYnJhcnlbYnV0dG9uS2V5XSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgYFRoZXJlIGlzIG5vIFwiJHtidXR0b25LZXl9XCIgaW4geW91ciBsaWJyYXJ5LiBQb3NzaWJsZSB2YXJpYW50czogJHtPYmplY3Qua2V5cyh0aGlzLl9idXR0b25MaWJyYXJ5KX1gXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJ1dHRvbiA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX2J1dHRvbkxpYnJhcnlbYnV0dG9uS2V5XSk7XG4gICAgICAvLyBidXR0b24uaXNBY3RpdmUgPSAoKSA9PiB7cmV0dXJuICEhdGhpcy5jb21tYW5kICYmIGRvY3VtZW50LnF1ZXJ5Q29tbWFuZFN0YXRlKHRoaXMuY29tbWFuZCk7fVxuICAgICAgdG9vbGJhckJ1dHRvbnMucHVzaChidXR0b24pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRvb2xiYXJCdXR0b25zO1xuICB9XG59XG5cbmNvbnN0IHN0cmluZzJhcnJheSA9IChrZXlzU3RyaW5nOiBzdHJpbmcpID0+XG4gIGtleXNTdHJpbmdcbiAgICAuc3BsaXQoJywnKVxuICAgIC5tYXAoRnVuY3Rpb24ucHJvdG90eXBlLmNhbGwsIFN0cmluZy5wcm90b3R5cGUudHJpbSk7XG4iXX0=